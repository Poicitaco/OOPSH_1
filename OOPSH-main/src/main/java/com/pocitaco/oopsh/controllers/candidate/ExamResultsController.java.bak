package com.pocitaco.oopsh.controllers.candidate;

import com.pocitaco.oopsh.controllers.BaseController;
import com.pocitaco.oopsh.dao.ExamTypeDAO;
import com.pocitaco.oopsh.dao.ResultDAO;
import com.pocitaco.oopsh.models.ExamType;
import com.pocitaco.oopsh.models.Result;
import com.pocitaco.oopsh.models.User;
import com.pocitaco.oopsh.utils.SessionManager;
import io.github.palexdev.materialfx.controls.MFXTableView;
import io.github.palexdev.materialfx.controls.cell.MFXTableRowCell;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;

import java.text.SimpleDateFormat;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class ExamResultsController extends BaseController {

    @FXML
    private MFXTableView<Result> tblResults;

    private ResultDAO resultDAO;
    private ExamTypeDAO examTypeDAO;
    private User currentUser;

    @Override
    public void initializeComponents() {
        this.resultDAO = new ResultDAO();
        this.examTypeDAO = new ExamTypeDAO();
        this.currentUser = SessionManager.getCurrentUser();
        setupTable();
    }

    @Override
    protected void loadInitialData() {
        if (currentUser != null) {
            List<Result> allResults = resultDAO.getAll();
            List<Result> myResults = allResults.stream()
                    .filter(result -> result.getUserId() == currentUser.getId())
                    .collect(Collectors.toList());
            tblResults.setItems(FXCollections.observableArrayList(myResults));
        }
    }

    private void setupTable() {
        MFXTableRowCell<Result, String> examNameCell = new MFXTableRowCell<>(result -> getExamName(result.getExamTypeId()));
        MFXTableRowCell<Result, String> examDateCell = new MFXTableRowCell<>(result -> new SimpleDateFormat("yyyy-MM-dd").format(result.getExamDate()));
        MFXTableRowCell<Result, Integer> theoryScoreCell = new MFXTableRowCell<>(Result::getTheoryScore);
        MFXTableRowCell<Result, Integer> practiceScoreCell = new MFXTableRowCell<>(Result::getPracticeScore);
        MFXTableRowCell<Result, String> statusCell = new MFXTableRowCell<>(result -> result.getStatus().toString());

        examNameCell.setComparator(Comparator.comparing(result -> getExamName(result.getExamTypeId())));
        examDateCell.setComparator(Comparator.comparing(Result::getExamDate));
        theoryScoreCell.setComparator(Comparator.comparing(Result::getTheoryScore));
        practiceScoreCell.setComparator(Comparator.comparing(Result::getPracticeScore));
        statusCell.setComparator(Comparator.comparing(Result::getStatus));

        tblResults.getTableColumns().addAll(
                new io.github.palexdev.materialfx.controls.MFXTableColumn<>("Exam Name", true, examNameCell),
                new io.github.palexdev.materialfx.controls.MFXTableColumn<>("Date", true, examDateCell),
                new io.github.palexdev.materialfx.controls.MFXTableColumn<>("Theory Score", true, theoryScoreCell),
                new io.github.palexdev.materialfx.controls.MFXTableColumn<>("Practice Score", true, practiceScoreCell),
                new io.github.palexdev.materialfx.controls.MFXTableColumn<>("Status", true, statusCell)
        );
    }

    private String getExamName(int examTypeId) {
        return examTypeDAO.get(examTypeId).map(ExamType::getName).orElse("Unknown Exam");
    }

    @Override
    protected void clearForm() {

    }

    @Override
    protected void setFormEnabled(boolean b) {

    }
}
